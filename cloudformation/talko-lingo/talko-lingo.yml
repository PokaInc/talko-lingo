---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Provision the Talko-Lingo's service"

Resources:
  AudioFileStore:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        TopicConfigurations:
        - Event: s3:ObjectCreated:*
          Topic: !Ref AudioFileStoreEventTopic

  AudioFileStoreEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !GetAtt S3EventHandlerLambda.Arn
        Protocol: lambda

  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - !Ref AudioFileStoreEventTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action:
          - SNS:Publish
          Resource: !Ref AudioFileStoreEventTopic
          Condition:
            StringEquals:
              aws:SourceAccount: !Sub '${AWS::AccountId}'

  S3EventHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: s3_event_handlers.lambda_handler
      Role: !GetAtt S3EventHandlerLambdaRole.Arn
      Code: ../../src/cloud/s3_event_handlers/
      Runtime: python3.6
      Timeout: '300'
      Environment:
        Variables:
          ENGLISH_TRANSCRIBE_STREAMING_LAMBDA_FUNCTION_NAME: "EnglishTranscribeLambdaFunction"
          DEVICE_CONFIG_TABLE_NAME: !Ref DeviceConfigTable
          PIPELINE_CONFIG_TABLE_NAME: !Ref PipelineConfigTable

  S3EventHandlerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Transcribe
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - transcribe:StartTranscriptionJob
            - transcribe:GetTranscriptionJob
            Resource: "*"
      - PolicyName: TranslateText
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - translate:TranslateText
            Resource: "*"
      - PolicyName: StartSpeechSynthesisTaskInPolly
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - polly:StartSpeechSynthesisTask
            Resource: "*"
      - PolicyName: IotPublish
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - iot:Publish
            Resource:
            - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/talko/rx"
            - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/talko/job_status"
      - PolicyName: LambdaAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:EnglishTranscribeLambdaFunction
      - PolicyName: DynamoPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            Resource:
            - !GetAtt DeviceConfigTable.Arn
            - !GetAtt PipelineConfigTable.Arn
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  S3EventHandlerAccessAudioFileStorePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AccessAudioFileStore
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          Resource: !Sub "${AudioFileStore.Arn}/*"
      Roles:
      - !Ref S3EventHandlerLambdaRole

  S3EventHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3EventHandlerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com

  # LocalLambdas:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: local-lambdas.yml
  #     Parameters:
  #       AudioFileStore: !Ref AudioFileStore

  TranscribeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
        - "aws.transcribe"
        detail-type:
        - "Transcribe Job State Change"
        detail:
          TranscriptionJobStatus:
          - "IN_PROGRESS"
          - "COMPLETED"
          - "FAILED"
      State: "ENABLED"
      Targets:
      - Arn: !GetAtt S3EventHandlerLambda.Arn
        Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3EventHandlerLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt TranscribeRule.Arn

  EnglishTranscribeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TranscribeStreamingUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: Transcribe
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - transcribe:StartStreamTranscription
            Resource: "*"
      - PolicyName: S3Access
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Sub "${AudioFileStore.Arn}/*"

  TranscribeStreamingAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: 0
      UserName: !Ref TranscribeStreamingUser

  EnglishTranscribeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "EnglishTranscribeLambdaFunction"  # Necessary to break circular dependency
      Handler: com.english_transcribe_function.Handler::lambdaHandler
      Role: !GetAtt EnglishTranscribeLambdaRole.Arn
      Code: ../../src/cloud/english_transcribe_function/build/distributions/english_transcribe_function.zip
      Runtime: java8
      Timeout: '300'
      MemorySize: 1024
      Environment:
        Variables:
          OVERRIDE_AWS_ACCESS_KEY_ID: !Ref TranscribeStreamingAccessKey
          OVERRIDE_AWS_SECRET_ACCESS_KEY: !GetAtt TranscribeStreamingAccessKey.SecretAccessKey

  DeviceConfigTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: false
        Sql: >-
          Select * FROM 'config-topic'
        Actions:
        - Lambda:
            FunctionArn: !GetAtt DeviceConfigLambdaFunction.Arn

  DeviceConfigLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: device_config_lambda.lambda_handler
      Role: !GetAtt DeviceConfigLambdaRole.Arn
      Code: ../../src/cloud/device_config_lambda/
      Runtime: python3.6
      Timeout: '300'
      Environment:
        Variables:
          DEVICE_CONFIG_TABLE_NAME: !Ref DeviceConfigTable

  DeviceConfigLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !GetAtt DeviceConfigTable.Arn

  DeviceConfigLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DeviceConfigLambdaFunction.Arn
      Principal: iot.amazonaws.com
      SourceArn: !GetAtt DeviceConfigTopicRule.Arn
      SourceAccount: !Ref AWS::AccountId

  DeviceConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: DeviceId
        AttributeType: S
      KeySchema:
      - AttributeName: DeviceId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  PipelineConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: ParameterName
        AttributeType: S
      KeySchema:
      - AttributeName: ParameterName
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  WebUiBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  WeuUiBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebUiBucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource: !Sub 'arn:aws:s3:::${WebUiBucket}/*'

Outputs:
  # RxLambda:
  #   Value: !GetAtt LocalLambdas.Outputs.RxLambda
  #
  # TxLambda:
  #   Value: !GetAtt LocalLambdas.Outputs.TxLambda

  WebsiteURL:
    Value: !GetAtt WebUiBucket.WebsiteURL

  WebsiteBucketName:
    Value: !Ref WebUiBucket
